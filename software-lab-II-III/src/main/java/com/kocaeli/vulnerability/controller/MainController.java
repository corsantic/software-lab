package com.kocaeli.vulnerability.controller;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.kocaeli.vulnerability.entity.Comment;
import com.kocaeli.vulnerability.entity.User;
import com.kocaeli.vulnerability.service.CommentService;
import com.kocaeli.vulnerability.service.UserService;


@Controller
@RequestMapping("/")
public class MainController

{
    @Autowired
    private UserService userService;

    @Autowired
    private CommentService commentService;

    static boolean isEmpty(String s)
    {
        return s == null || s.isEmpty();
    }

    @RequestMapping(method = RequestMethod.GET)
    public String printHello(Model model)
    {
        model.addAttribute("message", "Hello human!");
        return "home";
    }

    @RequestMapping(value = "/xss", method = RequestMethod.GET)
    public String xss(Model model)
    {
        model.addAttribute("comments", commentService.getComments());

        return "xss";
    }

    @RequestMapping(value = "/xss", method = RequestMethod.POST)
    public String postComment(Model model, @RequestParam("comment") String comment)
    {
        Comment c = new Comment();
        c.setMessage(comment);

        commentService.saveOrUpdate(c);

        model.addAttribute("comments", commentService.getComments());

        return "xss";
    }

    @RequestMapping(value = "/commandInjection", method = RequestMethod.GET)
    public String commandInjection()
    {
        return "commandInjection";
    }

    // tomcat user command yetkisi verilmeli
    @RequestMapping(value = "/commandInjection", method = RequestMethod.POST)
    public String commandInjectionPost(Model model, @RequestParam("host") String host)
    {
        String command = "ping -c 3 " + host;
        //        String command = " " + host;

        String s = executeCommand(command);
        model.addAttribute("result", s);

        return "commandInjection";
    }

    @RequestMapping(value = "/sqlInjection", method = RequestMethod.GET)
    public String user(Model model)
    {
        model.addAttribute("user", new User());
        return "sqlInjection";
    }

    @RequestMapping(value = "/sqlInjection", method = RequestMethod.POST)
    public String login(@ModelAttribute("user") User user, ModelMap model)
    {

        if (isEmpty(user.getPassword()) || isEmpty(user.getUsername()))
        {
            model.addAttribute("message", "bos gecme");
            return "home";
        }

        User loadedUser = userService.loadUser(user);
        if (loadedUser == null)
        {
            model.addAttribute("message", "there is a no user babos");
            return "home";
        }

        model.addAttribute("message", "Hello " + loadedUser.getUsername());
        return "home";
    }

    private String executeCommand(String command)
    {

        StringBuffer output = new StringBuffer();

        Process p;
        try
        {
            p = Runtime.getRuntime().exec(command);
            p.waitFor();
            BufferedReader reader =
                    new BufferedReader(new InputStreamReader(p.getInputStream()));

            String line = "";
            while ((line = reader.readLine()) != null)
            {
                output.append(line + "\n");
            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return output.toString();

    }

}