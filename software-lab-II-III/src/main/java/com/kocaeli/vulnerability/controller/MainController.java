package com.kocaeli.vulnerability.controller;

import static com.kocaeli.vulnerability.utility.Commons.executeCommand;
import static org.apache.commons.lang.StringUtils.isNotBlank;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.kocaeli.vulnerability.entity.Comment;
import com.kocaeli.vulnerability.entity.User;
import com.kocaeli.vulnerability.service.CommentService;
import com.kocaeli.vulnerability.service.UserService;


@Controller
@RequestMapping("/")
public class MainController
{
    @Autowired
    private UserService userService;

    @Autowired
    private CommentService commentService;


    @RequestMapping(method = RequestMethod.GET)
    public String home(Model model)
    {
        model.addAttribute("message", "Hello human!");
        return "home";
    }

    @RequestMapping(value = "/xss", method = RequestMethod.GET)
    public String xss(Model model)
    {
        model.addAttribute("comments", commentService.loadAll());

        return "xss";
    }

    @RequestMapping(value = "/xss", method = RequestMethod.POST)
    public String postComment(Model model, @RequestParam("comment") String comment)
    {
        Comment c = new Comment();
        c.setMessage(comment);

        commentService.saveOrUpdate(c);

        model.addAttribute("comments", commentService.loadAll());

        return "xss";
    }

    @RequestMapping(value = "/commandInjection", method = RequestMethod.GET)
    public String commandInjection()
    {
        return "commandInjection";
    }

    @RequestMapping(value = "/commandInjection", method = RequestMethod.POST)
    public String commandInjectionPost(Model model, @RequestParam("host") String host)
    {
        String command = "ping -c 3 " + host;

        model.addAttribute("result", executeCommand(command));

        return "commandInjection";
    }

    @RequestMapping(value = "/sqlInjection", method = RequestMethod.GET)
    public String user(Model model)
    {
        model.addAttribute("user", new User());
        return "sqlInjection";
    }

    @RequestMapping(value = "/sqlInjection", method = RequestMethod.POST)
    public String login(@ModelAttribute("user") User user, ModelMap model)
    {
        String message = "Kullanici adi yada sifre bos olamaz.";
        if (isNotBlank(user.getPassword()) && isNotBlank(user.getUsername()))
        {
            User loadedUser = userService.load(user);
            message = loadedUser == null ? "Kullanici adi yada sifre yanlis" : "Hosgeldin " + loadedUser.getUsername();
        }

        model.addAttribute("message", message);
        return "sqlInjection";
    }
}