package com.kocaeli.vulnerability.controller;

import static com.kocaeli.vulnerability.utility.Commons.executeCommand;
import static org.apache.commons.lang.StringUtils.isNotBlank;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.kocaeli.vulnerability.entity.Comment;
import com.kocaeli.vulnerability.entity.User;
import com.kocaeli.vulnerability.service.CommentService;
import com.kocaeli.vulnerability.service.UserService;


@Controller
@RequestMapping("/")
public class MainController
{
    @Autowired
    private UserService userService;

    @Autowired
    private CommentService commentService;


    @RequestMapping(method = RequestMethod.GET)
    public String home(Model model)
    {
        model.addAttribute("message", "Hello human!");
        return "home";
    }

    @RequestMapping(value = "/setup", method = RequestMethod.GET)
    public String setup()
    {
        return "setup";
    }

    @RequestMapping(value = "/xss", method = RequestMethod.GET)
    public String postComment(Model model, @RequestParam(value = "postComment", required = false) String comment)
    {
        if (isNotBlank(comment))
        {
            Comment c = new Comment();
            c.setMessage(comment);

            commentService.saveOrUpdate(c);
        }
        model.addAttribute("comments", commentService.loadAll());

        return "xss";
    }

    @RequestMapping(value = "/commandInjection", method = RequestMethod.GET)
    public String commandInjectionPost(Model model, @RequestParam(value = "host", required = false) String host)
    {
        if (isNotBlank(host))
        {
//            host = filterHost(host); // saldirilari onlemek icin
            String command = "ping  " + host;
            model.addAttribute("result", executeCommand(command));
        }
        else
        {
            model.addAttribute("result", "Lutfen uygun bir host giriniz.");
        }


        return "commandInjection";
    }

    private String filterHost(String command)
    {
        String regex = "www.[a-z-Z]{0,}.(com|net|org)";
        Pattern r = Pattern.compile(regex);

        Matcher m = r.matcher(command);
        if(m.find())
            return m.group();
        return "";
    }


    @RequestMapping(value = "/sqlInjection", method = RequestMethod.GET)
    public String user(Model model, @RequestParam(value = "username", required = false) String username,
                       @RequestParam(value = "password", required = false) String password)
    {
        String message = "Kullanici adi yada sifre bos olamaz.";
        if (isNotBlank(password) && isNotBlank(username))
        {

            User loadedUser = userService.load(username, password);
            message = loadedUser == null ? "Kullanici adi yada sifre yanlis" : "Hosgeldin " + loadedUser.getUsername();
        }

        model.addAttribute("message", message);
        return "sqlInjection";
    }
}