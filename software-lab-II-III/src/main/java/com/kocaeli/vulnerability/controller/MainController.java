package com.kocaeli.vulnerability.controller;

import com.kocaeli.vulnerability.entity.User;
import com.kocaeli.vulnerability.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/")
public class MainController {
    @RequestMapping(method = RequestMethod.GET)
    public String printHello(Model model) {
        model.addAttribute("message", "Hello human!");
        return "home";
    }
//    @RequestMapping(value = "/test",method = RequestMethod.GET)
//    public String test(Model model)
//    {
//        model.addAttribute("message", "Hello test!");
//        model.addAttribute("login", true);
//        return "test";
//    }

//    @RequestMapping(value = "/test",method = RequestMethod.GET)
//    public String login(Model model )
//    {
//     User user=new User();
//
//
//
//
//        //spring form post
//
//
//        model.addAttribute("message", "Hello test!");
//        return "test";
//    }
@RequestMapping("/Registration")
    public class LoginController {


        @Autowired
        public UserService.LoginService loginService;

        @RequestMapping(method = RequestMethod.GET)
        public String showForm(Map model) {
            User loginForm = new User();
            model.put("loginForm", loginForm);
            return "Registration";
        }

        @RequestMapping(method = RequestMethod.POST)
        public String processForm( User loginForm, BindingResult result,
                                  Map model) {


            if (result.hasErrors()) {
                return "Registration";
            }

		/*
		String userName = "UserName";
		String password = "password";
		loginForm = (LoginForm) model.get("loginForm");
		if (!loginForm.getUserName().equals(userName)
				|| !loginForm.getPassword().equals(password)) {
			return "loginform";
		}
		*/
            boolean userExists = loginService.checkLogin(loginForm.getUsername(),
                    loginForm.getPassword());
            if (userExists) {
                model.put("loginForm", loginForm);
                return "test";
            } else {
                result.rejectValue("userName", "invaliduser");
                return "Registration";
            }

        }
    }
}